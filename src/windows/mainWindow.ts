import { app, BrowserWindow, ipcMain } from "electron";

import windowManager, { MainWindowManager } from "./windowManager";
import { getMetadata } from "../services/store";
// import FilePress from "../services/filepress";

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

class MainWindow implements MainWindowManager {
  private window: Electron.BrowserWindow | null = null;
  filePress: any = null; //new FilePress();

  private createWindow() {
    this.window = new BrowserWindow({
      // x: bounds.width - 500,
      // y: bounds.height - 900,
      height: 700,
      width: 1024,
      frame: false,
      // transparent: true,
      resizable: false,
      fullscreenable: false,
      visualEffectState: "active",
      vibrancy: "sidebar",
      backgroundMaterial: "mica",
      titleBarStyle: "hiddenInset",
      webPreferences: {
        preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      },
    });
    this.window.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

    this.window.on("closed", () => {
      this.window = null;
    });
    const metadata = getMetadata();
    metadata.windowState && this.pinWindow();

    ipcMain.handle("pin-window", () => {
      this.pinWindow();
    });

    ipcMain.handle("minimize-window", () => {
      this.minimize();
    });
    ipcMain.handle("close-window", () => {
      app.quit();
    });
  }

  pinWindow() {
    if (this.window?.isAlwaysOnTop()) {
      if (app.dock) app.dock.show();
      this.window.setAlwaysOnTop(false);
      this.window.setVisibleOnAllWorkspaces(false);
      this.window.setHiddenInMissionControl(false);
    } else {
      if (app.dock) app.dock.hide();
      this.window.setAlwaysOnTop(true, "floating");
      this.window.setVisibleOnAllWorkspaces(true, {
        visibleOnFullScreen: true,
      });
      this.window.setHiddenInMissionControl(true);
    }
  }

  minimize() {
    this.window?.minimize();
  }

  open() {
    this.window ? this.window.show() : this.createWindow();
  }
  close() {
    this.window?.hide();
  }
}

windowManager.setMainWindowManager(new MainWindow());
